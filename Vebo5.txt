import java.io.*;
import java.util.*;

public class Solution {

      static final int inf = (int) 1e9 + 7;
    static final int maxN = 300007;

    static int n, q;
    static int[] a = new int[maxN];
    static int[] st = new int[4 * maxN];

    static void build(int id, int l, int r) {
        if (l == r) {
            st[id] = a[l];
            return;
        }

        int mid = l + (r - l) / 2;
        build(2 * id, l, mid);
        build(2 * id + 1, mid + 1, r);

        st[id] = Math.min(st[2 * id], st[2 * id + 1]);
    }

    static void update(int id, int l, int r, int i, int val) {
        if (l > i || r < i) return;

        if (l == r) {
            st[id] = val;
            return;
        }

        int mid = l + (r - l) / 2;
        update(2 * id, l, mid, i, val);
        update(2 * id + 1, mid + 1, r, i, val);

        st[id] = Math.min(st[2 * id], st[2 * id + 1]);
    }

    static int get(int id, int l, int r, int u, int v) {
        if (l > v || r < u) return inf;

        if (l >= u && r <= v) return st[id];

        int mid = l + (r - l) / 2;
        int get1 = get(2 * id, l, mid, u, v);
        int get2 = get(2 * id + 1, mid + 1, r, u, v);

        return Math.min(get1, get2);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        n = scanner.nextInt();
        for (int i = 1; i <= n; ++i) a[i] = scanner.nextInt();
        build(1, 1, n);

        q = scanner.nextInt();
        while (q-- > 0) {
            int type = scanner.nextInt();
            int x = scanner.nextInt();
            int y = scanner.nextInt();
            if (type == 2) update(1, 1, n, x, y);
            else System.out.println(get(1, 1, n, x, y));
        }
    }
}